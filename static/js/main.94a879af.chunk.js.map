{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","renderForm","renderDisplay","save","setState","alert","_nextText","value","_this2","react_default","a","createElement","className","ref","input","onClick","fa","children","id","Component","Board","notes","note","eachNote","i","src_Note","key","index","map","Boolean","window","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAuDeA,cAjDX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAS,GAEbR,EAAKS,KAAOT,EAAKS,KAAKC,KAAVT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACZA,EAAKY,OAASZ,EAAKY,OAAOF,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACdA,EAAKa,WAAab,EAAKa,WAAWH,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAClBA,EAAKc,cAAgBd,EAAKc,cAAcJ,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACrBA,EAAKe,KAAOf,EAAKe,KAAKL,KAAVT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KATEA,sEAYdG,KAAKa,SAAS,CACVR,SAAS,qCAIbS,MAAM,2CAGNA,MAAMd,KAAKe,UAAUC,4CAEb,IAAAC,EAAAjB,KACR,OACIkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,YAAUE,IAAK,SAAAC,GAAK,OAAIN,EAAKF,UAAYQ,KACzCL,EAAAC,EAAAC,cAAA,UAAQI,QAASxB,KAAKY,MAAMM,EAAAC,EAAAC,cAACK,EAAA,EAAD,iDAOpC,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAIpB,KAAKJ,MAAM8B,UACfR,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,UAAQO,GAAG,OAAOH,QAASxB,KAAKM,MAAMY,EAAAC,EAAAC,cAACK,EAAA,EAAD,OACtCP,EAAAC,EAAAC,cAAA,UAAQO,GAAG,SAASH,QAASxB,KAAKS,QAAQS,EAAAC,EAAAC,cAACK,EAAA,EAAD,0CAMtD,OAAOzB,KAAKI,MAAMC,QAAUL,KAAKU,aAAeV,KAAKW,uBA9C1CiB,aC8BJC,cA/BX,SAAAA,IAAa,IAAAhC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACThC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,QACKI,MAAQ,CACT0B,MAAO,CACH,CACIH,GAAI,GACJI,KAAM,aAEV,CACIJ,GAAI,GACJI,KAAM,gBAIlBlC,EAAKmC,SAAWnC,EAAKmC,SAASzB,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAdPA,wEAgBJkC,EAAME,GACX,OACIf,EAAAC,EAAAC,cAACc,EAAD,CAAMC,IAAKF,EAAGG,MAAOH,GAAIF,EAAKA,uCAKlC,OACIb,EAAAC,EAAAC,cAAA,WACKpB,KAAKI,MAAM0B,MAAMO,IAAIrC,KAAKgC,kBA1BvBJ,aCSAU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAAWC,SAASC,eAAe,SD2H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94a879af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FaPencilAlt } from 'react-icons/fa';\nimport { FaSave } from 'react-icons/fa';\nimport { FaTrash } from 'react-icons/fa';\n\nclass Note extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            editing: false\n        }\n        this.edit = this.edit.bind(this);\n        this.remove = this.remove.bind(this);\n        this.renderForm = this.renderForm.bind(this);\n        this.renderDisplay = this.renderDisplay.bind(this);\n        this.save = this.save.bind(this);\n    }\n    edit(){        \n        this.setState({\n            editing: true\n        })\n    }\n    remove(){\n        alert('removed!')\n    }\n    save(){\n        alert(this._nextText.value)\n    }\n    renderForm(){\n        return (\n            <div className=\"note\">\n            <form>\n                <textarea ref={input => this._nextText = input} />\n                <button onClick={this.save}><FaSave /></button>\n            </form>\n            </div>\n        )\n    }\n\n    renderDisplay() {\n        return (\n            <div className=\"note\">\n                <p>{this.props.children}</p>\n                <span>\n                    <button id=\"edit\" onClick={this.edit}><FaPencilAlt /></button>\n                    <button id=\"remove\" onClick={this.remove}><FaTrash /></button>\n                </span>\n            </div>\n        )\n    }\n    render(){\n        return this.state.editing ? this.renderForm() : this.renderDisplay()        \n    }\n}\n\nexport default Note;","import React, { Component } from 'react';\nimport Note from './Note';\n\nclass Board extends Component {\n    constructor(){\n        super()\n        this.state = {\n            notes: [\n                {\n                    id: 34,\n                    note: \"Call John\"\n                },\n                {\n                    id: 33, \n                    note: \"Email Juju\"\n                }\n            ]            \n        }\n        this.eachNote = this.eachNote.bind(this)\n    }\n    eachNote(note, i){\n        return (\n            <Note key={i} index={i}>{note.note}</Note>    \n        )\n        \n    }\n    render(){\n        return (\n            <div>\n                {this.state.notes.map(this.eachNote)}\n            </div>\n        )\n    }\n}\n\nexport default Board","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}